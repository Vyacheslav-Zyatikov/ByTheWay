version: '3.8'

networks:
  laravel:

services:
  nginx:
    build:
      context: ./docker
      dockerfile: nginx.dockerfile
      args:
        - UID=${UID:-1000}
        - GID=${GID:-1000}
        - USER=${USER:-gbdev_3}
    restart: unless-stopped
    container_name: nginx
    ports:
      - 80:8000
    volumes:
      - ./src:/var/www/html
      - .env:/var/www/html/.env
    depends_on:
      - php
      - redis
      - mysql
      - laravel-queue
      - laravel-cron
      - phpmyadmin
      - mailserver
    networks:
      - laravel

  php:
    build:
      context: ./docker
      dockerfile: php.dockerfile
      args:
        - UID=${UID:-1000}
        - GID=${GID:-1000}
        - USER=${USER:-gbdev_3}
    container_name: php
    ports:
      - 9000
    volumes:
      - ./src:/var/www/html
      - .env:/var/www/html/.env
    networks:
      - laravel

  mysql:
    image: mariadb:10.11.2
    container_name: mysql
    restart: unless-stopped
    tty: true
    ports:
      - 3307:3306
    environment:
      MYSQL_DATABASE: ${DB_DATABASE}
      MYSQL_USER: ${DB_USERNAME}
      MYSQL_PASSWORD: ${DB_PASSWORD}
      MYSQL_ROOT_PASSWORD: ${DB_PASSWORD}
      SERVICE_TAGS: dev
      SERVICE_NAME: mysql
    volumes:
      - ./docker/mysql:/var/lib/mysql
    networks:
      - laravel

  redis:
    image: redis:alpine
    container_name: redis
    restart: unless-stopped
    ports:
      - 6380:6379
    networks:
      - laravel

  laravel-cron:
    build:
      context: ./docker
      dockerfile: php.dockerfile
      args:
        - UID=${UID:-1000}
        - GID=${GID:-1000}
        - USER=${USER:-gbdev_3}
    container_name: laravel-cron
    volumes:
      - ./src:/var/www/html
      - .env:/var/www/html/.env
    depends_on:
      - mysql
    working_dir: /var/www/html
    entrypoint: ['php', '/var/www/html/artisan', 'schedule:work']
    networks:
      - laravel

  laravel-queue:
    build:
      context: ./docker
      dockerfile: php.dockerfile
      args:
        - UID=${UID:-1000}
        - GID=${GID:-1000}
        - USER=${USER:-gbdev_3}
    container_name: laravel-queue
    volumes:
      - ./src:/var/www/html
      - .env:/var/www/html/.env
    depends_on:
      - mysql
    working_dir: /var/www/html
    entrypoint: ['php', '/var/www/html/artisan', 'horizon']
    networks:
      - laravel

  mailserver:
    image: docker.io/mailserver/docker-mailserver:latest
    container_name: mailserver
    hostname: mail
    # Change this to your domain, it is used for your email accounts (eg: user@example.com):
    domainname: ByTheWay.ru
    ports:
      - 25:25
      - 587:587
      - 465:465
    volumes:
      - ./docker/dms/mail-data/:/var/mail/
      - ./docker/dms/mail-state/:/var/mail-state/
      - ./docker/dms/mail-logs/:/var/log/mail/
      - ./docker/dms/config/:/tmp/docker-mailserver/
      # The "from" path will vary based on where your certs are locally:
      - ./docker/nginx/certs/:/etc/letsencrypt/
      - /etc/localtime:/etc/localtime:ro
    environment:
      - ENABLE_FAIL2BAN=1
      # Using letsencrypt for SSL/TLS certificates
      - SSL_TYPE=letsencrypt
      # Allow sending emails from other docker containers
      # Beware creating an Open Relay: https://docker-mailserver.github.io/docker-mailserver/edge/config/environment/#permit_docker
      - PERMIT_DOCKER=network
      # All env below are default settings:
      - ONE_DIR=1
      - ENABLE_POSTGREY=0
      - ENABLE_CLAMAV=0
      - ENABLE_SPAMASSASSIN=0
      # You may want to enable this: https://docker-mailserver.github.io/docker-mailserver/edge/config/environment/#spoof_protection
      # See step 8 below, which demonstrates setup with enabled/disabled SPOOF_PROTECTION:
      - SPOOF_PROTECTION=0
    cap_add:
      - NET_ADMIN # For Fail2Ban to work
    networks:
      - laravel

  phpmyadmin:
    image: phpmyadmin:5.2.1
    container_name: phpmyadmin
    environment:
      PMA_ARBITRARY: 1
      PMA_HOST: ${DB_HOST}
      PMA_USER: ${DB_USERNAME}
      PMA_PASSWORD: ${DB_PASSWORD}
      PMA_PORT: ${DB_PORT}
    depends_on:
      - mysql
    ports:
      - 8880:80
    networks:
      - laravel

  laravel-migrate-seed:
    build:
      context: ./docker
      dockerfile: php.dockerfile
      args:
        - UID=${UID:-1000}
        - GID=${GID:-1000}
        - USER=${USER:-gbdev_3}
    container_name: laravel-migrate-seed
    volumes:
      - ./src:/var/www/html
      - .env:/var/www/html/.env
    depends_on:
      - mysql
    profiles: ["migrate-seed"]
    working_dir: /var/www/html
    entrypoint: ["/bin/sh","-c"]
    command:
      - |
        php artisan migrate
        php artisan db:seed
    networks:
      - laravel

  composer:
    build:
      context: ./docker
      dockerfile: composer.dockerfile
      args:
        - UID=${UID:-1000}
        - GID=${GID:-1000}
        - USER=${USER:-gbdev_3}
    container_name: composer
    volumes:
      - ./src:/var/www/html
      - .env:/var/www/html/.env
    working_dir: /var/www/html
    depends_on:
      - php
    user: ${USER:-gbdev_3} #system user
    profiles: ["composer"]
    entrypoint: ['composer']
    networks:
      - laravel

  artisan:
    build:
      context: ./docker
      dockerfile: php.dockerfile
      args:
        - UID=${UID:-1000}
        - GID=${GID:-1000}
        - USER=${USER:-gbdev_3}
    container_name: artisan
    volumes:
      - ./src:/var/www/html
      - .env:/var/www/html/.env
    depends_on:
      - mysql
    working_dir: /var/www/html
    profiles: ["artisan"]
    entrypoint: ['php', '/var/www/html/artisan']
    networks:
      - laravel

  npm:
    image: node:alpine
    container_name: npm
    volumes:
      - ./src:/var/www/html
      - .env:/var/www/html/.env
    ports:
      - 3000:3000
      - 3001:3001
    working_dir: /var/www/html
    profiles: ["npm"]
    entrypoint: ['npm']
    networks:
      - laravel
